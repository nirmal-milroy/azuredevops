trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
- stage: build
  displayName: Build
  jobs:
  - job: Build
    
    steps:
        - task: MavenAuthenticate@0
          inputs:
                artifactsFeeds: 'dps-lk'
                mavenServiceConnections: 'dps.snapshots'
        - task: MavenAuthenticate@0
          inputs:
                artifactsFeeds: 'dps-lk'
                mavenServiceConnections: 'dps.baserepo'

        - task: Cache@2
          inputs:
                key: 'maven | "$(Agent.OS)" | **/pom.xml'
                path: $(MAVEN_CACHE_FOLDER)
                restoreKeys: |
                    maven | "$(Agent.OS)"
                    maven
          displayName: MavenCache
        - task: Cache@2
          inputs:
                key: 'npm | "$(Agent.OS)" | **/package.json'
                restoreKeys: |
                    npm | "$(Agent.OS)"
                path: $(npm_config_cache)
          displayName: NPMCache

        - task: NodeTool@0
          inputs:
                versionSource: 'spec'
                versionSpec: '14.21.1'
        - task: Maven@3
          inputs:
                mavenPomFile: 'ibank/pom.xml'
                options: '-Dmaven.test.skip=true'
                publishJUnitResults: false
                javaHomeOption: 'JDKVersion'
                jdkVersionOption: '1.17'
                mavenVersionOption: 'Default'
                mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
                mavenAuthenticateFeed: false
                effectivePomSkip: false
                sqMavenPluginVersionChoice: 'latest'
# Read XML file
        - task: Bash@3
          inputs:
                targetType: 'inline'
                script: |
                    cd ibank
                    xml_file="pom.xml"
                    xml_tag="version"

                    tagversion=$(grep "$xml_tag" "$xml_file" | grep -v '<?xml' | grep '<'$xml_tag'>' | head -n 1 | awk '{print $1}' | cut -d'>' -f 2 | cut -d'<' -f 1)
                    echo "##vso[task.setvariable variable=tagversion]$tagversion"                    
                    echo  "pom: $tagversion"
        - task: Docker@2
          inputs:
            containerRegistry: 'domain.azurecr'
            repository: 'banking-backoffice'
            command: 'buildAndPush'
            Dockerfile: 'backoffice/Dockerfile'
            tags: '$(tagversion)'
    
# Copy and Publish Build Artifacts v1

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/war
            artifactName: icard
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: ipackage
            patterns: '**/*.war'
            path: $(Build.SourcesDirectory)/war
